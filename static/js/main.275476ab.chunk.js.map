{"version":3,"sources":["marker.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","message","historic","setHistoric","zoom","setZoom","color","setColor","useEffect","getInfo","setInterval","fetch","then","res","json","data","data1","toString","catch","err","console","log","style","display","flexDirection","height","fontWeight","length","latitud","longitud","date","className","Map","center","onZoomEnd","e","target","_zoom","TileLayer","attribution","url","Marker","position","icon","L","iconUrl","userLocation","iconSize","Popup","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,oC,uPCmG5BC,MA7Ff,WAAgB,IAAD,EACiBC,mBAC5B,yDAFW,mBACNC,EADM,aAKmBD,mBAAS,KAL5B,mBAKNE,EALM,KAKIC,EALJ,OAMWH,mBAAS,IANpB,mBAMNI,EANM,KAMAC,EANA,OAQaL,mBAAS,SARtB,mBAQNM,EARM,KAQCC,EARD,KAUbC,qBAAU,WACRC,IACAC,aAAY,WACVD,MACC,OACF,IAEHD,qBAAU,WACRD,EAAmB,SAAVD,EAAmB,QAAU,UACrC,CAACJ,IAEJ,IAAMO,EAAU,WACdE,MAAM,gCACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAS,IACPC,EAAUD,EAAVC,MAEFd,EAASe,aAAeD,EAAMC,YAChCd,EAAYa,MAGfE,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OAG9B,OACE,yBACEG,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,OAAQ,UAGV,yBAAKH,MAAO,CAAEhB,MAAOA,EAAOoB,WAAY,WAAazB,GACrD,yBAAKqB,MAAO,CAAEhB,MAAOA,EAAOoB,WAAY,WAAxC,YACYxB,EAASyB,OAAS,GAAKzB,EAASA,EAASyB,OAAS,GAAGC,SAEjE,yBAAKN,MAAO,CAAEhB,MAAOA,EAAOoB,WAAY,WAAxC,YACY,IACTxB,EAASyB,OAAS,GAAKzB,EAASA,EAASyB,OAAS,GAAGE,UAExD,yBAAKP,MAAO,CAAEhB,MAAOA,EAAOoB,WAAY,WAAxC,gBACgB,IACbxB,EAASyB,OAAS,GAAKzB,EAASA,EAASyB,OAAS,GAAGG,MAExD,yBAAKC,UAAU,QACb,kBAACC,EAAA,EAAD,CACED,UAAU,MACVE,OAAQ,CACN/B,EAASyB,OAAS,GAAKzB,EAASA,EAASyB,OAAS,GAAGC,QACrD1B,EAASyB,OAAS,GAAKzB,EAASA,EAASyB,OAAS,GAAGE,UAEvDzB,KAAMA,EACN8B,UAAW,SAAAC,GACT9B,EAAQ8B,EAAEC,OAAOC,SAGnB,kBAACC,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,uDAEN,kBAACC,EAAA,EAAD,CACEC,SAAU,CACRxC,EAASyB,OAAS,GAAKzB,EAASA,EAASyB,OAAS,GAAGC,QACrD1B,EAASyB,OAAS,GAAKzB,EAASA,EAASyB,OAAS,GAAGE,UAEvDc,KAAMC,IAAED,KAAK,CACXE,QAASC,IACTC,SAAU,CAAC,GAAI,OAGjB,kBAACC,EAAA,EAAD,gBACW,IACR9C,EAASyB,OAAS,GAAKzB,EAASA,EAASyB,OAAS,GAAGC,QAAS,IAC/D,6BAHF,aAGmB,IAChB1B,EAASyB,OAAS,GAAKzB,EAASA,EAASyB,OAAS,GAAGE,eC9EhDoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEd5C,OAAM,SAAA6C,GACL3C,QAAQ2C,MAAMA,EAAM9D,c","file":"static/js/main.275476ab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/marker.71c80642.png\";","import React, { Component, useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport L from \"leaflet\";\nimport userLocation from \"./marker.png\";\nimport { Map, TileLayer, Marker, Popup } from \"react-leaflet\";\n\nfunction App() {\n  const [message, setMessage] = useState(\n    \">REV002096113686+1101831-0748084000022732;ID=SyrusG4<\"\n  );\n\n  const [historic, setHistoric] = useState([]);\n  const [zoom, setZoom] = useState(15);\n\n  const [color, setColor] = useState(\"black\");\n\n  useEffect(() => {\n    getInfo();\n    setInterval(() => {\n      getInfo();\n    }, 1000);\n  }, []);\n\n  useEffect(() => {\n    setColor(color === \"blue\" ? \"black\" : \"blue\");\n  }, [historic]);\n\n  const getInfo = () => {\n    fetch(\"http://localhost:5000/coords\")\n      .then(res => res.json())\n      .then(data => {\n        let { data1 } = data;\n\n        if (historic.toString() !== data1.toString()) {\n          setHistoric(data1);\n        }\n      })\n      .catch(err => console.log(err));\n  };\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        height: \"100vw\"\n      }}\n    >\n      <div style={{ color: color, fontWeight: \"bolder\" }}>{message}</div>\n      <div style={{ color: color, fontWeight: \"bolder\" }}>\n        Latitud: {historic.length > 0 && historic[historic.length - 1].latitud}\n      </div>\n      <div style={{ color: color, fontWeight: \"bolder\" }}>\n        Longitud:{\" \"}\n        {historic.length > 0 && historic[historic.length - 1].longitud}\n      </div>\n      <div style={{ color: color, fontWeight: \"bolder\" }}>\n        Fecha y Hora:{\" \"}\n        {historic.length > 0 && historic[historic.length - 1].date}\n      </div>\n      <div className=\"dive\">\n        <Map\n          className=\"map\"\n          center={[\n            historic.length > 0 && historic[historic.length - 1].latitud,\n            historic.length > 0 && historic[historic.length - 1].longitud\n          ]}\n          zoom={zoom}\n          onZoomEnd={e => {\n            setZoom(e.target._zoom);\n          }}\n        >\n          <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          <Marker\n            position={[\n              historic.length > 0 && historic[historic.length - 1].latitud,\n              historic.length > 0 && historic[historic.length - 1].longitud\n            ]}\n            icon={L.icon({\n              iconUrl: userLocation,\n              iconSize: [40, 40]\n            })}\n          >\n            <Popup>\n              Latitud:{\" \"}\n              {historic.length > 0 && historic[historic.length - 1].latitud}{\" \"}\n              <br /> Longitud:{\" \"}\n              {historic.length > 0 && historic[historic.length - 1].longitud}\n            </Popup>\n          </Marker>\n        </Map>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}