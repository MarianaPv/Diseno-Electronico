{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","message","setMessage","date","setDate","color","setColor","plusSign","indexOf","minusSign","latitud","substring","longitud","useEffect","getInfo","setInterval","dummy","janTimeMilli","Date","getTime","numWeeks","parseInt","numSeconds","time1","toString","decomposeTime","fetch","then","res","json","data","catch","err","console","log","style","display","flexDirection","height","fontWeight","className","Map","center","zoom","TileLayer","attribution","url","Marker","position","icon","L","iconUrl","iconSize","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"0SAiFeA,MA5Ef,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNC,EADM,KACGC,EADH,OAEWF,mBAAS,IAFpB,mBAENG,EAFM,KAEAC,EAFA,OAIaJ,mBAAS,SAJtB,mBAINK,EAJM,KAICC,EAJD,KAKPC,EAAWN,EAAQO,QAAQ,KAC3BC,EAAYR,EAAQO,QAAQ,KAC5BE,EACJT,EAAQU,UAAUJ,EAAW,EAAGA,EAAW,GAC3C,IACAN,EAAQU,UAAUJ,EAAW,EAAGA,EAAW,GACvCK,EACJ,IACAX,EAAQU,UAAUF,EAAY,EAAGA,EAAY,GAC7C,IACAR,EAAQU,UAAUF,EAAY,EAAGA,EAAY,GAY/CI,qBAAU,WACRC,IACAC,aAAY,WACVD,MACC,OACF,IAEHD,qBAAU,WACRP,EAAmB,SAAVD,EAAmB,QAAU,QAlBlB,SAAAW,GACpB,IAAMC,EAAe,IAAIC,KAAK,4BAA4BC,UACpDC,EAAWC,SAASL,EAAML,UAAU,EAAG,KACvCW,EAAaD,SAASL,EAAML,UAAU,GAAI,KAG1CY,EAAQ,IAAIL,KADQ,IAAbI,EADoB,EAAXF,EAAe,GAAK,GAAK,GAAK,IACHH,GACpBO,WAC7BpB,EAAQmB,GAYRE,CAAcxB,KACb,CAACA,IAEJ,IAAMa,EAAU,WACdY,MAAM,mCACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACA7B,IAAY6B,GACd5B,EAAW4B,MAGdC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OAG9B,OACE,yBAAKG,MAAO,CAAEC,QAAS,OAAQC,cAAe,SAAUC,OAAQ,UAC9D,yBAAKH,MAAO,CAAE9B,MAAOA,EAAOkC,WAAY,WAAatC,GACrD,yBAAKkC,MAAO,CAAE9B,MAAOA,EAAOkC,WAAY,WAAxC,YACY7B,GAEZ,yBAAKyB,MAAO,CAAE9B,MAAOA,EAAOkC,WAAY,WAAxC,aACa3B,GAEb,yBAAKuB,MAAO,CAAE9B,MAAOA,EAAOkC,WAAY,WAAxC,UAA4DpC,GAC5D,yBAAKqC,UAAU,QACb,kBAACC,EAAA,EAAD,CAAKD,UAAU,MAAME,OAAQ,CAAC,WAAY,WAAYC,KAAM,IAC1D,kBAACC,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,uDAEN,kBAACC,EAAA,EAAD,CACEC,SAAU,CAAC,UAAW,UACtBC,KAAMC,IAAED,KAAK,CAAEE,QAAS,cAAeC,SAAU,CAAC,GAAI,YC7D9CC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdnC,OAAM,SAAAoC,GACLlC,QAAQkC,MAAMA,EAAMlE,c","file":"static/js/main.745bb42f.chunk.js","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport L from \"leaflet\";\nimport { Map, TileLayer, Marker } from \"react-leaflet\";\n\nfunction App() {\n  const [message, setMessage] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n\n  const [color, setColor] = useState(\"black\");\n  const plusSign = message.indexOf(\"+\");\n  const minusSign = message.indexOf(\"-\");\n  const latitud =\n    message.substring(plusSign + 1, plusSign + 3) +\n    \".\" +\n    message.substring(plusSign + 3, plusSign + 8);\n  const longitud =\n    \"-\" +\n    message.substring(minusSign + 2, minusSign + 4) +\n    \".\" +\n    message.substring(minusSign + 4, minusSign + 9);\n\n  const decomposeTime = dummy => {\n    const janTimeMilli = new Date(\"January 5, 1980 19:00:00\").getTime();\n    const numWeeks = parseInt(dummy.substring(6, 10));\n    const numSeconds = parseInt(dummy.substring(11, 16));\n    const numWeeksMilli = numWeeks * 7 * 24 * 60 * 60 * 1000;\n    const time = numSeconds * 1000 + numWeeksMilli + janTimeMilli;\n    const time1 = new Date(time).toString();\n    setDate(time1);\n  };\n\n  useEffect(() => {\n    getInfo();\n    setInterval(() => {\n      getInfo();\n    }, 10000);\n  }, []);\n\n  useEffect(() => {\n    setColor(color === \"blue\" ? \"black\" : \"blue\");\n    decomposeTime(message); // cambiar a message\n  }, [message]);\n\n  const getInfo = () => {\n    fetch(\"http://62d959f7.ngrok.io/coords\")\n      .then(res => res.json())\n      .then(data => {\n        if (message !== data) {\n          setMessage(data);\n        }\n      })\n      .catch(err => console.log(err));\n  };\n\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", height: \"100vw\" }}>\n      <div style={{ color: color, fontWeight: \"bolder\" }}>{message}</div>\n      <div style={{ color: color, fontWeight: \"bolder\" }}>\n        Latitud: {latitud}\n      </div>\n      <div style={{ color: color, fontWeight: \"bolder\" }}>\n        Longitud: {longitud}\n      </div>\n      <div style={{ color: color, fontWeight: \"bolder\" }}>Fecha: {date}</div>\n      <div className=\"dive\">\n        <Map className=\"map\" center={[11.018946, -74.850515]} zoom={15}>\n          <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          <Marker\n            position={[11.01836, -74.80877]}\n            icon={L.icon({ iconUrl: \"logo192.png\", iconSize: [50, 50] })}\n          ></Marker>\n        </Map>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"leaflet/dist/leaflet.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}